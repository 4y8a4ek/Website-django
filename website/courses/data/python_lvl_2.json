{
  "title": "Python(medium)",
  "id": "python_lvl_2",
  "total-blocks": 87,
  "photo": "medpyt.png",
  "group": "Python",
  "sections": [
    {
      "title": "Численный тип данных",
      "content": [
        {
          "block-id": 1,
          "title": "Целочисленный тип данных int",
          "type": "theory",
          "text": "Целые числа в Python обозначаются типом int (от англ. integer). Они состоят только из цифр 0-9 и могут быть положительными, отрицательными или нулём. <br> 'code' a = 17   # положительное целое число \n b = -7   # отрицательное целое число \n c = 0    # ноль 'code'<br> Числовые значения, записанные явно в коде, называются целочисленными литералами."
        },
        {
          "block-id": 2,
          "title": "Преобразование строки в целое число",
          "type": "theory",
          "text": "Чтобы преобразовать строку в число, используем функцию int(): <br> 'code' num = int(input()) \n n = int('12345') 'code' <br> Если строка содержит нецифровые символы, произойдёт ошибка."
        },
        {
          "block-id": 3,
          "title": "Арифметические операторы с int",
          "type": "theory",
          "text": "Python поддерживает стандартные арифметические операторы: <ol><li> + — сложение</li>  <li>- — вычитание </li> <li>* — умножение </li> <li>/ — деление (результат — float!)</li> <li>// — целочисленное деление </li> <li>% — остаток от деления </li> <li>* — возведение в степень </li> </ol> <br> 'code' a = 13 \n b = 7 \n \n print(a + b)     # 20 \n print(a - b)     # 6 \n print(a * b)     # 91 \n print(a / b)     # 1.857142857... \n print(a // b)    # 1 \n print(a % b)     # 6 \n print(a ** b)    # 62748517 'code'"
        },
        {
          "block-id": 4,
          "title": "Особенности int в Python",
          "type": "theory",
          "text": "В Python нет ограничения на размер целых чисел (в отличие от C/C++/Java): <br> 'code' atoms = 10 ** 80 \n print(atoms) 'code' <br> Также для удобства чтения можно использовать подчёркивания в числах: <br> 'code' num1 = 25_000_000 \n print(num1)  # 25000000 'code'"
        },
        {
          "block-id": 5,
          "title": "Тип float: числа с плавающей точкой",
          "type": "theory",
          "text": "Для хранения дробных чисел используется тип float: <br> 'code' e = 2.71828 \n pi = 3.1415 'code' <br> Результат деления / всегда будет float: <br> 'code' print(4 / 2)  # 2.0 'code' <br> Преобразование строки в float: <br> 'code' n = float('1.2345') 'code' "
        },
        {
          "block-id": 6,
          "title": "Арифметические операторы с float",
          "type": "theory",
          "text": "Доступны те же операторы, за исключением // и %, которые лучше использовать с int. <br> 'code' a = 13.5 \n b = 2.0 \n \n print(a + b)   # 15.5 \n print(a - b)   # 11.5 \n print(a * b)   # 27.0 \n print(a / b)   # 6.75 \n print(a ** b)  # 182.25 'code' "
        },
        {
          "block-id": 7,
          "title": "Преобразование между int и float",
          "type": "theory",
          "text": "<ul><li>int → float — происходит автоматически</li> <li>float → int — необходимо явное преобразование с потерей дробной части: </li></ul> <br> 'code' num = int(3.99)  # 3 'code' <br> Округление не происходит — число усекается к нулю: <br> 'code' int(-1.7)  # -1 'code' <br>Для округления используйте round() и другие функции."
        },
        {
          "block-id": 8,
          "title": "Заключение",
          "type": "theory",
          "text": "Понимание типов данных int и float, их особенностей и правил преобразования — важный навык начинающего программиста. Это позволяет избежать логических ошибок и писать надёжный, читаемый код. Даже одна ошибка в преобразовании может привести к катастрофическим последствиям, как это было с французской ракетой Ariane 5 в 1996 году."
        }
      ]
    },
    {
      "title": "Встроенные функции Python",
      "content": [
        {
          "block-id": 9,
          "title": "Вывод данных. Оператор print()",
          "type": "theory",
          "text": "Python предоставляет множество встроенных функций, реализация которых скрыта от пользователя. Эти функции облегчают разработку, избавляя от необходимости писать часто используемые алгоритмы вручную. <br> Мы уже знакомы с: <ol><li>print() — вывод на экран;</li> <li>input() — ввод с клавиатуры;</li> <li>int() — преобразование в целое число;</li> <li>float() — преобразование в число с плавающей точкой. </li> </ol> <br>Теперь рассмотрим три других полезных функции."
        },
        {
          "block-id": 10,
          "title": "Функция min()",
          "type": "theory",
          "text": "Возвращает наименьшее значение из переданных аргументов. <br> 'code' print(min(3, 8, -3, 12, 9))     # -3 \n print(min(3.14, 2.17, 9.8))     # 2.17 'code' "
        },
        {
          "block-id": 11,
          "title": "Функция max()",
          "type": "theory",
          "text": "Возвращает наибольшее значение из переданных аргументов. <br>'code' print(max(3, 8, -3, 12, 9))     # 12 \n print(max(3.14, 2.17, 9.8))     # 9.8 'code' "
        },
        {
          "block-id": 12,
          "title": "Функция abs()",
          "type": "theory",
          "text": "Возвращает абсолютное значение (модуль) числа.<br> 'code' print(abs(10))        # 10 \n print(abs(-7))        # 7 \n print(abs(0))         # 0 \n print(abs(-17.67))    # 17.67 'code'"
        },
        {
          "block-id": 13,
          "title": "Универсальность и вывод",
          "type": "theory",
          "text": "Функции min(), max() и abs() работают как с целыми (int), так и с вещественными числами (float), а также могут применяться к любым типам, поддерживающим сравнение или унарный минус. Это делает их универсальными помощниками при решении широкого круга задач. <br> Использование встроенных функций делает код компактнее, читаемее и устойчивее к ошибкам. Понимание работы min(), max() и abs() позволяет быстро обрабатывать числовые данные и писать надёжные программы."
        },
        {
          "block-id": 14,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' num = max(1, 3, -5, 7) + min(-3, 6, -8, -1) + abs(-17) \n print(num) 'code'",
          "test_type": "text_input",
          "correct": "16"
        }
      ]
    },
    {
      "title": "Строковый тип данных",
      "content": [
        {
          "block-id": 15,
          "title": "Параметр sep",
          "type": "theory",
          "text": "Строковый тип данных (str) используется для хранения и обработки текста. В Python строки создаются с помощью одинарных или двойных кавычек: <br> 'code' s1 = 'Python rocks!' \n s2 = \"Python rocks!\" 'code' <br> По умолчанию, функция input() возвращает строку: <br> 'code' s = input()  # переменная s имеет тип str 'code' <br>Для создания пустой строки используют две кавычки: <br> 'code' s1 = ''     # пустая строка \n s2 = ' '    # строка с одним пробелом 'code' <br>Пустая строка и строка с пробелом — это разные значения."
        },
        {
          "block-id": 16,
          "title": "Длина строки",
          "type": "theory",
          "text": "Функция <b>len()</b> возвращает длину строки — количество символов в ней: <br> 'code' s1 = 'abcdef' \n print(len(s1))               # 6 \n print(len('Python rocks!'))  # 13 'code' <br> Пробелы также учитываются при подсчёте."
        },
        {
          "block-id": 17,
          "title": "Преобразование чисел в строку",
          "type": "theory",
          "text": "Чтобы преобразовать число в строку, используют функцию str(): <br> 'code' num1 = 1777 \n num2 = 17.77 \n s1 = str(num1)  # '1777' \n s2 = str(num2)  # '17.77' 'code' <br> Это удобно при необходимости обрабатывать числа как текст"
        },
        {
          "block-id": 18,
          "title": "Конкатенация строк",
          "type": "theory",
          "text": "Сложение строк называется конкатенацией. Оно соединяет строки вместе: <br> 'code' s1 = 'ab' + 'bc' \n s2 = 'bc' + 'ab' \n s3 = s1 + s2 + '!!' \n print(s1)  # abbc \n print(s2)  # bcab \n print(s3)  # abbcbcab!! 'code' <br> Порядок важен:  <br> 'code' 'a' + 'b' != 'b' + 'a' 'code' <br> Можно использовать конкатенацию для форматирования вывода: <br> 'code' print('a', 'b', 'c', sep='*', end='!') \n print() \n print('a' + '*' + 'b' + '*' + 'c' + '!') 'code' <br> Результат: <br> 'code' a*b*c! \n a*b*c! 'code'"
        },
        {
          "block-id": 19,
          "title": "Умножение строки на число",
          "type": "theory",
          "text": "Умножение строки на число повторяет её несколько раз: <br> 'code' print('Hi' * 4)  # HiHiHiHi \n print('-' * 75)  # печатает 75 дефисов 'code' <br> Важно: строку можно умножать на число, но не наоборот."
        },
        {
          "block-id": 20,
          "title": "Примечания",
          "type": "theory",
          "text": "<ol> <li>Многострочные строки создаются с помощью тройных кавычек: <br> 'code' text = '''Python is an interpreted language. \n It was created by Guido van Rossum.''' 'code' </li> <li>Одинарные и двойные кавычки позволяют удобно вставлять внутрь строки другие кавычки: <br> 'code' s1 = 'Он сказал: \"Привет!\"' \n s2 = \"А она ответила: 'Здравствуйте!'\" \n print(s1) \n print(s2) 'code' <br> Результат: <br> 'code' Он сказал: \"Привет!\" \n А она ответила: 'Здравствуйте!' 'code'"
        },
        {
          "block-id": 32,
          "title": "Оператор in",
          "type": "theory",
          "text": "Оператор in используется для проверки, содержится ли одна строка (подстрока) внутри другой: <br> 'code' s = 'https://pygen.ru/' \n if 'a' in s: \n \t print('Введенная строка содержит символ а') \n else: \n \t print('Введенная строка не содержит символ а') 'code' <br>Результат: <br> 'code' Введенная строка не содержит символ а 'code' <br><b>Использование с логическим оператором not</b><br> <br>Оператор not in позволяет проверять, что подстрока отсутствует: <br> 'code' s = input() \n if '.' not in s: \n \t print('Введенная строка не содержит символа точки') 'code'"
        },
        {
          "block-id": 33,
          "title": "Проверка принадлежности к набору символов",
          "type": "theory",
          "text": "Можно упростить множественные сравнения: <br> 'code' # Было: \n if s == 'a' or s == 'e' or s == 'i' or s == 'o' or s == 'u': \n \t print('YES') \n \n # Стало: \n if len(s) == 1 and s in 'aeiou': \n \t print('YES') 'code'"
        },
        {
          "block-id": 34,
          "title": "Точное вхождение (последовательность символов)",
          "type": "theory",
          "text": "Оператор in проверяет наличие точной последовательности символов: <br> 'code' print('ab' in 'abc')  # True \n print('ac' in 'abc')  # False 'code' <br> Во втором случае a и c не идут подряд — между ними находится b, поэтому результат False. <br> <br> <b>Проверка in чувствительна к регистру: </b> <br> 'code' s = 'Alpha' \n print('p' in s)  # True \n print('P' in s)  # False 'code' <br> <br> <b>Примечание </b> <br>Если строка s1 содержится в строке s2, то говорят, что s1 — это подстрока строки s2. Оператор in позволяет легко это определить"
        },
        {
          "block-id": 35,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' mystr = 'да' \n mystr = mystr + 'нет' \n mystr = mystr + 'да' \n print(mystr) 'code' ",
          "test_type": "text_input",
          "correct": "данетда"
        },
        {
          "block-id": 36,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' str1 = '1' \n str2 = str1 + '2' + str1 \n str3 = str2 + '3' + str2 \n str4 = str3 + '4' + str3 \n print(str4) 'code' ",
          "test_type": "text_input",
          "correct": "121312141213121"
        },
        {
          "block-id": 37,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' mystr = '123' * 3 + '456' * 2 + '789' * 1 \n print(mystr) 'code' ",
          "test_type": "text_input",
          "correct": "123123123456456789"
        },
        {
          "block-id": 38,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' language1 = 'JavaScript' \n language2 = 'Java' \n \n print(language1 in language2) \n print(language2 in language1) 'code' ",
          "test_type": "single_choice",
          "options": [
            "True \n True",
            "True \n False",
            "False \n True",
            "False \n False",
            "произойдет ошибкa"
          ],
          "correct": [2]
        },
        {
          "block-id": 39,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' digits = '0123456789' \n \n print('45' in digits) \n print('09' in digits) 'code' ",
          "test_type": "single_choice",
          "options": [
            "False \n False",
            "False \n True",
            "True \n True",
            "True \n False",
            "произойдет ошибкa"
          ],
          "correct": [3]
        }
      ]
    },
    {
      "title": "Цикл for и range()",
      "content": [
        {
          "block-id": 40,
          "title": "Основы цикла for в Python",
          "type": "theory",
          "text": " 'code' for переменная in range(количество_повторений): \n \t тело_цикла 'code' <br> <ul><li><b>Переменная</b> — переменная цикла, которая по очереди принимает значения из последовательности, генерируемой range(). </li> <li><b>range(n)</b> создаёт последовательность чисел от 0 до n-1.</li> <li><b>Тело цикла</b> — блок кода с отступом, который выполняется на каждой итерации.</li> </ul> <br>Пример с выводом \"Привет\" 10 раз <br> 'code' for i in range(10): \n \t print('Привет') 'code' <br>Выведет слово \"Привет\" ровно 10 раз"
        },
        {
          "block-id": 41,
          "title": "Переменная цикла и её роль",
          "type": "theory",
          "text": "Переменная цикла принимает значения из range. Например: <br> 'code' for i in range(5): \n \t print(i) 'code' <br> Выведет числа от 0 до 4 (всего 5 чисел). Счёт начинается с 0, потому что range(5) — это [0,1,2,3,4]. <br> <br> Чтобы начать счёт с 1: <br> 'code' for i in range(10): \n \t print(i + 1, '-- Привет') 'code' <br> Выведет числа от 1 до 10 с текстом."
        },
        {
          "block-id": 42,
          "title": "Работа с range() с двумя и тремя параметрами",
          "type": "theory",
          "text": "<ul><li>range(start, stop) — последовательность от start до stop - 1.</li><li>range(start, stop, step) — последовательность от start до stop - 1 с шагом step.</li></ul> <br>Пример: <br> 'code' for i in range(1, 6):  # 1, 2, 3, 4, 5 \n \t print(i) 'code' <br> 'code' for i in range(5, 26, 5):  # 5, 10, 15, 20, 25 \n \t print(i) 'code'"
        },
        {
          "block-id": 43,
          "title": "Отрицательный шаг для убывающих последовательностей",
          "type": "theory",
          "text": "'code' for i in range(5, 0, -1): \n \t print(i, end=' ')\n print('Взлетаем!!!') 'code' <br>Выведет: <br> 'code' 5 4 3 2 1 Взлетаем!!! 'code'"
        },
        {
          "block-id": 44,
          "title": "Подсчёт количества и суммирование с помощью переменных-счётчиков и сумматоров",
          "type": "theory",
          "text": "Чтобы подсчитать, сколько из введённых чисел больше 10: <br> 'code' counter = 0 \n for _ in range(10): \n \t num = int(input()) \n \t if num > 10: \n \t \t counter += 1 \n print('Чисел больше 10:', counter) 'code' <br>Чтобы вычислить сумму таких чисел: <br> 'code' total = 0 \n for _ in range(10): \n \t num = int(input()) \n \t if num > 10: \n \t \t total += num \n print('Сумма чисел больше 10:', total) 'code'"
        },
        {
          "block-id": 44,
          "title": "Советы по написанию циклов for",
          "type": "theory",
          "text": "<ul><li>Используйте осмысленные имена переменных цикла, если они важны.</li> <li>Если переменная цикла не нужна, используйте _.</li> <li>Помните, что range() не включает правую границу.</li> <li>Используйте переменные-счётчики и сумматоры для подсчёта и накопления.</li> </ul> <br><br><b>Заключение</b><br>Циклы for — мощный и удобный инструмент для повторения действий с известным числом итераций. Функция range() — главный помощник для задания последовательности чисел. Правильное использование переменных цикла и счётчиков значительно упрощает решение повседневных задач."
        },
        {
          "block-id": 45,
          "type": "test",
          "question": "Какую последовательность чисел даст вам вызов функции 'code' range(8) 'code' ",
          "test_type": "single_choice",
          "options": [
            "0, 1, 2, 3, 4, 5, 6, 7, 8",
            "1, 2, 3, 4, 5, 6, 7",
            "пустая последовательность",
            "0, 1, 2, 3, 4, 5, 6, 7",
            "1, 2, 3, 4, 5, 6, 7, 8"
          ],
          "correct": [3]
        },
        {
          "block-id": 46,
          "type": "test",
          "question": "Какую последовательность чисел даст вам вызов функции 'code' range(1,8) 'code' ",
          "test_type": "single_choice",
          "options": [
            "0, 1, 2, 3, 4, 5, 6, 7, 8",
            "1, 2, 3, 4, 5, 6, 7",
            "пустая последовательность",
            "0, 1, 2, 3, 4, 5, 6, 7",
            "1, 2, 3, 4, 5, 6, 7, 8"
          ],
          "correct": [1]
        },
        {
          "block-id": 47,
          "type": "test",
          "question": "Какую последовательность чисел даст вам вызов функции 'code' range(3, 11, 2) 'code' ",
          "test_type": "single_choice",
          "options": [
            "3, 4, 5, 6, 7, 8, 9, 10, 11",
            "3, 5, 7, 9, 11",
            "пустая последовательность",
            "3, 4, 5, 6, 7, 8, 9, 10",
            "3, 5, 7, 9"
          ],
          "correct": [4]
        },
        {
          "block-id": 48,
          "type": "test",
          "question": "Какую последовательность чисел даст вам вызов функции 'code' range(10, 0, -2) 'code' ",
          "test_type": "single_choice",
          "options": [
            "10, 8, 6, 4, 2",
            "10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0",
            "пустая последовательность",
            "2, 4, 6, 8, 10",
            "0, 2, 4, 6, 8, 10"
          ],
          "correct": [0]
        },
        {
          "block-id": 49,
          "type": "test",
          "question": "Сколько итераций сделает цикл? <br> 'code' for _ in range(1, 6): \n \t print('Python rocks!') 'code' ",
          "test_type": "single_choice",
          "options": ["1", "4", "5", "6", "3"],
          "correct": [2]
        },
        {
          "block-id": 50,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' num1 = 4 \n num2 = 6 \n num1 += num2 \n num1 *= num1 \n print(num1) 'code' ",
          "test_type": "text_input",
          "correct": "100"
        },
        {
          "block-id": 51,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' total = 0 \n for i in rage(1, 6): \n \t total += i \n print(total) 'code' ",
          "test_type": "text_input",
          "correct": "15"
        },
        {
          "block-id": 52,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' total = 0 \n for i in rage(1, 6): \n \t total += i \n \t print(total, end='') 'code' ",
          "test_type": "text_input",
          "correct": "1361015"
        }
      ]
    },
    {
      "title": "Цикл While",
      "content": [
        {
          "block-id": 53,
          "title": "Цикл While",
          "type": "theory",
          "text": "Цикл while — что это и как работает? <br>Представь, что цикл — это команда, которая повторяет какие-то действия много раз. Есть два типа таких повторений: <ul><li>Когда мы знаем, сколько раз надо повторить (например, 10 раз) — это цикл for. </li> <li>Когда мы не знаем точное число повторов и хотим делать что-то, пока не произойдет событие — это цикл while.</li></ul> <br><br><b>Происхождение названия и особенности</b> <ul><li>Название while — с английского \"пока\", потому что цикл работает, пока условие верно.</li> <li>Проверка условия происходит сначала, потом выполняется тело цикла (это называется цикл с предусловием).</li> <li>Тело цикла, выполненное один раз — называется итерацией.</li> <li>Цикл может не выполниться ни разу, если условие изначально ложно.</li></ul>"
        },
        {
          "block-id": 54,
          "title": "Как выглядит цикл while?",
          "type": "theory",
          "text": "В Python он выглядит так: <br> 'code' while условие: \n \t команды 'code' <ul><li>Сначала проверяется условие.</li> <li>Если условие истинно (правда), выполняются команды под ним.</li> <li>После этого снова проверяется условие — и так до тех пор, пока условие останется верным.</li></ul> <br><b>Важно:</b> все команды, которые выполняются в цикле, должны иметь отступ (обычно 4 пробела) под строкой с while. <br><br><b>Пример:</b> вывести слово \"Привет\" 10 раз с помощью while <br> 'code' i = 0 \n while i < 10: \n \t print('Привет') \n \t i += 1  # увеличиваем i на 1, чтобы цикл не был бесконечным 'code' <br>Здесь мы заводим переменную i и пока i меньше 10 — выводим \"Привет\" и увеличиваем i на 1."
        },
        {
          "block-id": 55,
          "title": "Когда while лучше for?",
          "type": "theory",
          "text": "Если заранее не известно, сколько раз нужно повторить действие — тогда for не подходит, а while — отлично. <br><b>Пример:</b> программа читает числа и выводит их квадраты, пока не введут -1. <br> 'code' num = int(input()) \n  while num != -1: \n \t print('Квадрат вашего числа равен:', num * num) \n \t num = int(input()) 'code' <br> Тут мы не знаем, сколько чисел введёт пользователь, поэтому используем while."
        },
        {
          "block-id": 56,
          "title": "Важные моменты при использовании while",
          "type": "theory",
          "text": "<ul><li>Нужно правильно задать начальное значение переменной (как num или i).</li> <li>В теле цикла переменная, которую проверяет условие, должна изменяться. Иначе цикл не закончится — получится бесконечный цикл.</li> <li>Цикл while похож на if, но if выполняет код один раз, а while — много раз.</li></ul>"
        },
        {
          "block-id": 57,
          "title": "Примеры",
          "type": "theory",
          "text": "<b>Вывести числа от 0 до 100:</b> <br>С for: <br>'code' for i in range(101): \n \t print(i) 'code' <br> С while: <br> 'code' i = 0 \n while i < 101: \n \t print(i) \n \t i += 1 'code' <br> С for проще — он сам считает, с while — нужно считать самому. <br><br><b>Ещё пример: вывести все числа, кратные 3</b> <br>С for: <br> 'code' for i in range(0, 100, 3): \n \t print(i) 'code' <br>С while: <br> 'code' i = 0 \n while i < 100: \n \t print(i) \n \t i += 3 'code' <br> <br> <b>Пример программы, которая складывает числа, пока не введут слово \"stop\":</b> <br> 'code' text = input() \n total = 0 \n while text != 'stop': \n \t total += int(text) \n \t text = input() \n \n print('Сумма чисел равна', total) 'code' "
        },
        {
          "block-id": 58,
          "title": "Что такое бесконечный цикл?",
          "type": "theory",
          "text": "Это когда условие всегда остаётся правдой и цикл не останавливается. Например: <br> 'code' i = 0 \n total = 0 \n while i < 10: \n \t total += i \n \t # забыли увеличить i, поэтому условие всегда true 'code' <br>Цикл будет выполняться бесконечно, пока программу не остановят вручную."
        },
        {
          "block-id": 59,
          "title": "Обработка цифр числа с помощью цикла while",
          "type": "theory",
          "text": "Представим число, например 1234. Чтобы получить каждую цифру: <ul><li>n % 10 — последняя цифра (4).</li> <li>n // 10 — число без последней цифры (123).</li></ul> <br><b>Пример:</b> <br> 'code' n = int(input()) \n while n != 0: \n \t last_digit = n % 10  # берем последнюю цифру \n \t # здесь можно что-то делать с last_digit \n \t n = n // 10  # убираем последнюю цифру из числа 'code' <br><br><b>Пример:</b> проверить, есть ли в числе цифра 7 <br> 'code' num = int(input()) \n has_seven = False \n \n while num != 0: \n \t last_digit = num % 10 \n \t if last_digit == 7: \n \t \t has_seven = True \n \t num = num // 10 \n \n  if has_seven: \n \t print('YES') \n else: \n \t print('NO') 'code' <br> Такой подход помогает быстро и просто работать с цифрами любого числа, даже если оно очень большое."
        },
        {
          "block-id": 60,
          "type": "test",
          "question": "Когда цикл while проверяет свое условие: до или после того, как он выполнит итерацию?",
          "test_type": "single_choice",
          "options": ["до", "после"],
          "correct": [0]
        },
        {
          "block-id": 61,
          "type": "test",
          "question": "Сколько раз сообщение \"Python awesome!\" будет напечатано в результате выполнения приведённого ниже кода? <br> 'code' count = 10 \n while count < 1: \n \t print('Python awesome!') 'code'",
          "test_type": "single_choice",
          "options": ["0", "1", "2", "9", "10", "бесконечно много раз"],
          "correct": [0]
        },
        {
          "block-id": 62,
          "type": "test",
          "question": "Сколько раз сообщение \"Python awesome!\" будет напечатано в результате выполнения приведённого ниже кода? <br> 'code' count = 1 \n while count < 10: \n \t print('Python awesome!') \n \t count += 1 'code'",
          "test_type": "single_choice",
          "options": ["0", "1", "2", "9", "10", "бесконечно много раз"],
          "correct": [3]
        },
        {
          "block-id": 63,
          "type": "test",
          "question": "Сколько раз сообщение \"Python awesome!\" будет напечатано в результате выполнения приведённого ниже кода? <br> 'code' count = 1 \n while count < 10: \n \t print('Python awesome!') 'code'",
          "test_type": "single_choice",
          "options": ["0", "1", "2", "9", "10", "бесконечно много раз"],
          "correct": [5]
        },
        {
          "block-id": 64,
          "type": "test",
          "question": "Какое число нужно написать вместо многоточия, чтобы цикл выполнился ровно 7 раз? <br> 'code' i = 5 \n while i <= ...: \n \t print('Python awesome!') \n \t i += 1 'code'",
          "test_type": "text_input",
          "correct": "11"
        },
        {
          "block-id": 65,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' i = 7 \n a = 5 \n while i < 11: \n \t a += i \n \t i += 2 \n \n print(a) 'code' ",
          "test_type": "text_input",
          "correct": "21"
        },
        {
          "block-id": 66,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' num = 12345 \n product = 1 \n while num != 0: \n \t last_digit = num % 10 \n \t product = product * last_digit \n \t num = num // 10 \n \n print(product) 'code' ",
          "test_type": "text_input",
          "correct": "120"
        },
        {
          "block-id": 67,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' num = 123456789 \n total = 0 \n while num != 0: \n \t last_digit = num % 10 \n \t if last_digit > 4: \n \t \t total += 1 \n \n \t num = num // 10 \n \n print(total) 'code' ",
          "test_type": "text_input",
          "correct": "5"
        }
      ]
    },
    {
      "title": "Операторы break, continue",
      "content": [
        {
          "block-id": 68,
          "title": "Оператор break — досрочное прерывание цикла",
          "type": "theory",
          "text": "<ul><li>Прерывает ближайший цикл (for или while).</li> <li>Позволяет остановить цикл, если дальнейшие итерации уже бессмысленны.</li> <li>Очень полезен для оптимизации — избавляет от лишних вычислений.</li></ul> <br><b>Пример:</b> проверка числа на простоту. Как только найден делитель — цикл прерывается, дальнейшие проверки не нужны. <br> 'code' num = int(input()) \n flag = True \n \n for i in range(2, num): \n \t if num % i == 0: \n \t \t flag = False \n \t \t break  # найден делитель, прерываем цикл \n if flag: \n \t print('Число простое') \n else: \n \t print('Число составное') 'code'"
        },
        {
          "block-id": 69,
          "title": "Оператор continue — пропуск текущей итерации",
          "type": "theory",
          "text": "<ul><li>Позволяет пропустить остальной код тела цикла и перейти к следующей итерации.</li> <li>Удобен, когда нужно исключить из обработки отдельные случаи.</li></ul> <br><b>Пример:</b> вывести числа от 1 до 100, кроме заданных: <br> 'code' for i in range(1, 101): \n \t if i in (7, 17, 29, 78): \n \t \t continue  # пропускаем эти числа \n \t print(i) 'code'"
        },
        {
          "block-id": 70,
          "title": "Бесконечные циклы с while True и их управление",
          "type": "theory",
          "text": "<ul><li>Бесконечный цикл работает, пока не встретится break.</li> <li>Полезен для программ, которые должны постоянно работать, например, принимать и обрабатывать запросы.</li></ul> <br>'code' while True: \n \t query = get_new_query() \n \t if not query: \n \t \t break  # выходим из цикла при отсутствии запроса \n \t query.process() 'code'"
        },
        {
          "block-id": 71,
          "title": "Особенность Python: блок else после цикла",
          "type": "theory",
          "text": "<ul><li>Выполняется только если цикл завершился естественным образом (без break).</li> <li>Позволяет отделить логику «успешного» завершения цикла от досрочного.</li></ul> <br><b>Пример:</b> <br> 'code' n = 5 \n while n > 0: \n \t n -= 1 \n \t print(n) \n else: \n \t print('Цикл завершен штатно') 'code' <br><b>Результат:</b> <br> 'code' 4 \n 3 \n 2 \n 1 \n 0 \n Цикл завершен штатно 'code' <br><br>Если в цикле был break, блок else не выполнится: <br> 'code' n = 5 \n while n > 0:  \n \t n -= 1 \n \t print(n) \n \t if n == 2: \n \t \t break \n else: \n \t print('Цикл завершен штатно') 'code' <br> Результат: <br> 'code' 4 \n 3 \n 2 'code' <br> (без вывода после цикла)"
        },
        {
          "block-id": 72,
          "title": "Пример использования break с else для поиска цифры 7 в числе",
          "type": "theory",
          "text": "Вместо флага flag и дополнительной проверки после цикла можно сделать так: <br> 'code' num = int(input()) \n n = num \n while n != 0: \n \t last = n % 10 \n \t if last == 7: \n \t \t print('Число', num, 'содержит цифру 7') \n \t \t break \n \t n //= 10 \n else: \n \t print('Число', num, 'не содержит цифру 7') 'code' <br><ul><li>Если в цикле не встретился break (т.е. цифра 7 не найдена), выполнится блок else.</li> <li>Если break встретился — блок else пропускается.</li></ul>"
        },
        {
          "block-id": 73,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' for i in range(10): \n \t print(i, end='*') \n \t if i > 6: \n \t \t break 'code' ",
          "test_type": "text_input",
          "correct": "0*1*2*3*4*5*6*7*"
        },
        {
          "block-id": 74,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' i = 100 \n while i > 0: \n \t if i == 40: \n \t \t break \n \t print(i, end='*') \n \t i -= 20 'code' ",
          "test_type": "text_input",
          "correct": "100*80*60*"
        },
        {
          "block-id": 75,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' n = 10 \n while n > 0: \n \t n -= 1 \n \t if n == 2: \n \t \t continue \n \t print(n, end='*') 'code' ",
          "test_type": "text_input",
          "correct": "9*8*7*6*5*4*3*1*0*"
        },
        {
          "block-id": 76,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' result = 0 \n for i in range(10): \n \t if i % 2 == 0: \n \t \t continue \n \t result += i \n \n print(result) 'code' ",
          "test_type": "text_input",
          "correct": "25"
        },
        {
          "block-id": 77,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' mult = 1 \n for i in range(1,11): \n \t if i % 2 == 0: \n \t \t continue \n \t if i % 9 == 0: \n \t \t break \n \t mult *= i \n \n print(mult) 'code' ",
          "test_type": "text_input",
          "correct": "105"
        },
        {
          "block-id": 78,
          "type": "test",
          "question": "Будет ли выполнен блок else в приедённом ниже коде? <br> 'code' n = 0 \n while n < 10: \n \t n += 2 \n \t print(n) \n else: \n \t print('Цикл завершен.') 'code'",
          "test_type": "single_choice",
          "options": ["Да", "Нет"],
          "correct": [0]
        },
        {
          "block-id": 79,
          "type": "test",
          "question": "Будет ли выполнен блок else в приедённом ниже коде? <br> 'code' n = 0 \n while n < 10: \n \t n += 2 \n \t if n == 8: \n \t \t break \n \t print(n) \n else: \n \t print('Цикл завершен.') 'code'",
          "test_type": "single_choice",
          "options": ["Да", "Нет"],
          "correct": [1]
        },
        {
          "block-id": 80,
          "type": "test",
          "question": "Будет ли выполнен блок else в приедённом ниже коде? <br> 'code' n = 0 \n while n < 10: \n \t n += 2 \n \t if n == 7: \n \t \t break \n \t print(n) \n else: \n \t print('Цикл завершен.') 'code'",
          "test_type": "single_choice",
          "options": ["Да", "Нет"],
          "correct": [0]
        }
      ]
    },
    {
      "title": "Вложенные циклы",
      "content": [
        {
          "block-id": 81,
          "title": " Что такое вложенные циклы",
          "type": "theory",
          "text": "Вложенные циклы — это циклы внутри других циклов. Классический пример — часы: <br> 'code' for hours in range(24): \n \t for minutes in range(60): \n \t \t for seconds in range(60): \n \t \t \t print(hours, ':', minutes, ':', seconds) 'code' <br> ✅ Всего итераций: 24 * 60 * 60 = 86400 <br>📌 <b>Важно:</b> <ul><li>Внутренний цикл выполняется полностью для каждой итерации внешнего.</li> <li>Общая сложность = произведение всех диапазонов.</li></ul>"
        },
        {
          "block-id": 82,
          "title": "Применение break и continue",
          "type": "theory",
          "text": "Они работают только в ближайшем цикле. <br> 'code' for i in range(3): \n \t for j in range(3): \n \t \t if i == j: \n \t \t \t break   # Прерывает только ВНУТРЕННИЙ цикл \n \t \t print(i, j) 'code' <br>Результат: <br> 'code' 1 0 \n 2 0 \n 2 1 'code' <br>Если заменить на continue: <br> 'code' for i in range(3): \n \t for j in range(3): \n \t \t if i == j: \n \t \t \t continue \n \t \t print(i, j) 'code' <br> Результат: <br> 'code' 0 1 \n 0 2 \n 1 0 \n 1 2 \n 2 0 \n 2 1 'code'"
        },
        {
          "block-id": 83,
          "title": "Как прервать внешний цикл из внутреннего",
          "type": "theory",
          "text": "Используйте сигнальную метку: <br> 'code' found = False \n for i in range(10): \n \t for j in range(10): \n \t \t if i * j > 50: \n \t \t \t found = True \n \t \t \t break \n \t if found: \n \t \t break 'code' <br>📌 Без метки break прервёт только внутренний цикл!"
        },
        {
          "block-id": 84,
          "title": "Рисунки при помощи фложенных циклов",
          "type": "theory",
          "text": "<b>Прямоугольник из звёздочек 8×6:</b> <br> 'code' for i in range(8): \n \t for j in range(6): \n \t \t print('*', end='') \n \t print() 'code' <br> <b>Треугольник: </b> <br> 'code' for i in range(8): \n \t for j in range(i + 1): \n \t \t print('*', end='') \n \t print() 'code'"
        },
        {
          "block-id": 85,
          "title": "Полезные замечания",
          "type": "theory",
          "text": "<ul><li>break — прерывает ближайший цикл.</li><li>continue — пропускает текущую итерацию ближайшего цикла.</li><li>Вложенные циклы часто используются в матрицах, таблицах, рисунках, симуляциях (например, моделирование шахматной доски, клеточного автомата и пр.).</li></ul>"
        },
        {
          "block-id": 86,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' for i in range(1,4): \n \t for j in range(3,5): \n \t \t print(i+j,end='') 'code' ",
          "test_type": "text_input",
          "correct": "455667"
        },
        {
          "block-id": 87,
          "type": "test",
          "question": "Что покажет приведенный ниже код? <br> 'code' counter = 0 \n for i in rage(99, 102): \n \t temp = i \n \t while temp > 0: \n \t \t counter += 1 \n \t \t temp //= 10 \n \n print(counter) 'code' ",
          "test_type": "text_input",
          "correct": "8"
        }
      ]
    }
  ]
}
