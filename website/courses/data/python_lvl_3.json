{
  "title": "Python(hard)",
  "id": "python_lvl_3",
  "total-blocks": 84,
  "photo": "harpyt.png",
  "group": "Python",
  "sections": [
    {
      "title": "–°—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö",
      "content": [
        {
          "block-id": 1,
          "type": "theory",
          "title": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç—Ä–æ–∫–∏ –≤ Python",
          "text": "–°—Ç—Ä–æ–∫–∏ –Ω—É–∂–Ω—ã, –∫–æ–≥–¥–∞ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ç–µ–∫—Å—Ç–∞–º–∏ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –∏–º–µ–Ω–∞–º–∏, —Å–ª–æ–≤–∞–º–∏, —Ñ—Ä–∞–∑–∞–º–∏. <br><br><b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É</b> <br>–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –ø—Ä–æ—Å—Ç–æ –æ–±–µ—Ä–Ω–∏ —Ç–µ–∫—Å—Ç –≤ –∫–∞–≤—ã—á–∫–∏ ‚Äî –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ (' ') –∏–ª–∏ –¥–≤–æ–π–Ω—ã–µ (\" \"): <br>'code' s1 = 'Python' \n s2 = \"Pascal\" 'code' <br>–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ.<br><br><b>üì• –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b><br>–ö–æ–≥–¥–∞ –º—ã —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ —Å–∞–º –≤–≤—ë–ª —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º input():<br> 'code' name = input()  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç \n number = int(input())  # –≤–≤–æ–¥–∏–º —á–∏—Å–ª–æ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ä–∞–∑—É –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —á–∏—Å–ª–æ 'code' <br><br><b>üï≥ –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞</b> <br>–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–æ—Ç–∞. –¢–æ–≥–¥–∞ –ø–∏—à–µ–º: <br>'code' empty = '' 'code' <br>–≠—Ç–æ –∫–∞–∫ –Ω–æ–ª—å, —Ç–æ–ª—å–∫–æ –≤ –º–∏—Ä–µ —Ç–µ–∫—Å—Ç–∞. <br><br><b>üìè –°–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ </b> <br>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏, —Ç–æ –µ—Å—Ç—å —Å–∫–æ–ª—å–∫–æ –≤ –Ω–µ–π —Å–∏–º–≤–æ–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º len():<br> 'code' word = 'Hello' \n print(len(word))  # –≤—ã–¥–∞—Å—Ç 5 'code' "
        },
        {
          "block-id": 2,
          "type": "theory",
          "title": "–°–ª–æ–∂–µ–Ω–∏–µ –∏ —É–º–Ω–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫",
          "text": "–í Python —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ñ–æ–∫—É—Å—ã: <br><ul><li>+ ‚Äî —Å–∫–ª–µ–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–µ–π)</li> <li>* ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑</li></ul> <br>–ü—Ä–∏–º–µ—Ä—ã: <br> 'code' print('Hi' + ' there')     # Hi there \n print('Yo' * 3)            # YoYoYo 'code'"
        },
        {
          "block-id": 3,
          "type": "theory",
          "title": "–ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏",
          "text": "–ú—ã –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—Ö–æ–¥–∏—Ç –ª–∏ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç –≤ –¥—Ä—É–≥–æ–π, —Å –ø–æ–º–æ—â—å—é —Å–ª–æ–≤–∞ in: <br> 'code' line = 'All you need is love' \n if 'love' in line: \n \t print('‚ù§Ô∏è') \n else: \n \t print('üíî') 'code'"
        },
        {
          "block-id": 4,
          "type": "theory",
          "title": "–ò–Ω–¥–µ–∫—Å—ã ‚Äî –∫–∞–∫ –≤–∑—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª",
          "text": "–í —Å—Ç—Ä–æ–∫–µ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –∏–º–µ–µ—Ç —Å–≤–æ–π –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω—É–ª—è, –∞ –Ω–µ —Å –µ–¥–∏–Ω–∏—Ü—ã: <br> 'code' s = 'Python' \n print(s[0])  # 'P' \n print(s[1])  # 'y' \n print(s[5])  # 'n' \n #–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å —Å –∫–æ–Ω—Ü–∞, –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: \n print(s[-1])  # 'n' \n print(s[-2])  # 'o' 'code' <br><br><b>‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏</b> <br>–ï—Å–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–∏–º–≤–æ–ª—É, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, s[99]), Python –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É. –¢–∞–∫ —á—Ç–æ —Å–ª–µ–¥–∏–º, —á—Ç–æ–±—ã –Ω–æ–º–µ—Ä –±—ã–ª –æ—Ç 0 –¥–æ len(s) - 1. <br><br><b>–ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ</b> <br>–í–∞—Ä–∏–∞–Ω—Ç 1 ‚Äî —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å—ã: <br> 'code' s = 'abcdef' \n for i in range(len(s)): \n \t print(s[i]) 'code' <br>–í–∞—Ä–∏–∞–Ω—Ç 2 ‚Äî –ø—Ä–æ—â–µ, –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤: <br> 'code' for letter in s: \n \t print(letter) 'code'"
        },
        {
          "block-id": 5,
          "type": "theory",
          "title": "–ò–Ω–¥–µ–∫—Å—ã ‚Äî –∫–∞–∫ –≤–∑—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª",
          "text": "–°—Ä–µ–∑ ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –≤–∑—è—Ç—å –∫—É—Å–æ—á–µ–∫ —Å—Ç—Ä–æ–∫–∏:<br> 'code' s = 'abcdefghij' \n print(s[2:5])  # cde 'code' <br><ul><li>–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ ‚Äî –æ—Ç–∫—É–¥–∞ –Ω–∞—á–∞—Ç—å (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)</li> <li>–í—Ç–æ—Ä–æ–µ ‚Äî –≥–¥–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å (–Ω–µ –≤–∫–ª—é—á–∞–µ–º)</li></ul> <br>–ú–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—á–∞–ª–æ –∏–ª–∏ –∫–æ–Ω–µ—Ü: <br> 'code' print(s[:4])   # abcd \n print(s[5:])   # fghij \n print(s[:])    # –≤—Å—è —Å—Ç—Ä–æ–∫–∞ 'code' <br> –°—Ä–µ–∑—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∏ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏: <br> 'code' print(s[-3:])   # hij \n print(s[:-1])   # abcdefghi 'code' <br><br><b>–®–∞–≥ —Å—Ä–µ–∑–∞</b> <br>–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî —à–∞–≥: <br> 'code' print(s[1:7:2])  # bdf 'code' <br> –ï—Å–ª–∏ —à–∞–≥ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ‚Äî —Å—Ç—Ä–æ–∫–∞ —á–∏—Ç–∞–µ—Ç—Å—è –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É: <br> 'code' print(s[::-1])  # jihgfedcba 'code'"
        },
        {
          "block-id": 6,
          "type": "theory",
          "title": "–ö–∞–∫ –∑–∞–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –≤ —Å—Ç—Ä–æ–∫–µ",
          "text": "–°—Ç—Ä–æ–∫–∏ –≤ Python –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –Ω–∞–ø—Ä—è–º—É—é: <br> 'code' s = 'abcdefghij' \n s[4] = 'X'  # ‚ùå –æ—à–∏–±–∫–∞ 'code' <br>–ù–æ –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É: <br> 'code' s = s[:4] + 'X' + s[5:] 'code'"
        },
        {
          "block-id": 7,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' s = 'abcdefg' \n print(s[0] + s[2] + s[4] + s[6]) 'code' ",
          "test_type": "text_input",
          "correct": "aceg"
        },
        {
          "block-id": 8,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' s = 'abcdefg' \n print(s[0]*3 + s[-1]*3 + s[3]*2 + s[3]*2) 'code' ",
          "test_type": "text_input",
          "correct": "aaagggdddd"
        },
        {
          "block-id": 9,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' s = '01234567891011121314151617' \n for i in range(0, les(s), 5): \n \t print(s[i], end='') 'code' ",
          "test_type": "text_input",
          "correct": "051217"
        },
        {
          "block-id": 10,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' s = 'abcdefg' \n print(s[2:5]) 'code' ",
          "test_type": "text_input",
          "correct": "cde"
        },
        {
          "block-id": 11,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' s = 'abcdefg' \n print(s[3:]) 'code' ",
          "test_type": "text_input",
          "correct": "defg"
        },
        {
          "block-id": 12,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' s = 'abcdefg' \n print(s[:3]) 'code' ",
          "test_type": "text_input",
          "correct": "abc"
        },
        {
          "block-id": 13,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' s = 'abcdefg' \n print(s[:]) 'code' ",
          "test_type": "text_input",
          "correct": "abcdefg"
        },
        {
          "block-id": 14,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' s = 'abcdefg' \n print(s[::-3]) 'code' ",
          "test_type": "text_input",
          "correct": "gda"
        }
      ]
    },
    {
      "title": "–ú–µ—Ç–æ–¥—ã —Å—Ç—Ä–æ–∫",
      "content": [
        {
          "block-id": 15,
          "type": "theory",
          "image": "course_photos/python_hard/1.jpg"
        },
        {
          "block-id": 16,
          "type": "theory",
          "image": "course_photos/python_hard/2.jpg"
        },
        {
          "block-id": 17,
          "type": "theory",
          "image": "course_photos/python_hard/3.jpg"
        },
        {
          "block-id": 18,
          "type": "theory",
          "image": "course_photos/python_hard/4.jpg"
        },
        {
          "block-id": 19,
          "type": "theory",
          "image": "course_photos/python_hard/5.jpg"
        },
        {
          "block-id": 20,
          "type": "theory",
          "image": "course_photos/python_hard/6.jpg"
        },
        {
          "block-id": 21,
          "type": "theory",
          "image": "course_photos/python_hard/7.jpg"
        },
        {
          "block-id": 22,
          "type": "theory",
          "image": "course_photos/python_hard/8.jpg"
        },
        {
          "block-id": 23,
          "type": "theory",
          "image": "course_photos/python_hard/9.jpg"
        },
        {
          "block-id": 24,
          "type": "theory",
          "image": "course_photos/python_hard/12.jpg"
        },
        {
          "block-id": 25,
          "type": "theory",
          "image": "course_photos/python_hard/13.jpg"
        },
        {
          "block-id": 26,
          "type": "theory",
          "image": "course_photos/python_hard/14.jpg"
        },
        {
          "block-id": 27,
          "type": "theory",
          "image": "course_photos/python_hard/15.jpg"
        },
        {
          "block-id": 28,
          "type": "theory",
          "image": "course_photos/python_hard/16.jpg"
        },
        {
          "block-id": 29,
          "type": "theory",
          "image": "course_photos/python_hard/17.jpg"
        },
        {
          "block-id": 30,
          "type": "theory",
          "image": "course_photos/python_hard/18.jpg"
        },
        {
          "block-id": 31,
          "type": "theory",
          "image": "course_photos/python_hard/19.jpg"
        },
        {
          "block-id": 32,
          "type": "theory",
          "image": "course_photos/python_hard/20.jpg"
        },
        {
          "block-id": 33,
          "type": "theory",
          "image": "course_photos/python_hard/22.jpg"
        },
        {
          "block-id": 34,
          "type": "theory",
          "image": "course_photos/python_hard/24.jpg"
        },
        {
          "block-id": 35,
          "type": "theory",
          "image": "course_photos/python_hard/25.jpg"
        },
        {
          "block-id": 36,
          "type": "theory",
          "image": "course_photos/python_hard/26.jpg"
        },
        {
          "block-id": 37,
          "type": "theory",
          "image": "course_photos/python_hard/27.jpg"
        },
        {
          "block-id": 38,
          "type": "theory",
          "image": "course_photos/python_hard/28.jpg"
        },
        {
          "block-id": 39,
          "type": "theory",
          "image": "course_photos/python_hard/29.jpg"
        },
        {
          "block-id": 40,
          "type": "theory",
          "image": "course_photos/python_hard/30.jpg"
        },
        {
          "block-id": 41,
          "type": "theory",
          "image": "course_photos/python_hard/31.jpg"
        },
        {
          "block-id": 42,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' s = '$12344%^$#@!' \n print(s.lower()) 'code' ",
          "test_type": "text_input",
          "correct": "$12344%^$#@!"
        },
        {
          "block-id": 43,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' s1 = 'a' \n s2 = a.upper() \n print(s1, s2) 'code' ",
          "test_type": "text_input",
          "correct": "a A"
        },
        {
          "block-id": 44,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' s = 'aabbAAccDDaa' \n s = s.lower() \n print(s.count('a')) 'code' ",
          "test_type": "text_input",
          "correct": "6"
        },
        {
          "block-id": 45,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' s = 'abcdababa' \n print(s.replace('ab', '123')) 'code' ",
          "test_type": "text_input",
          "correct": "123cd123123a"
        },
        {
          "block-id": 46,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' s = 'aabbAA111ccDDaa' \n print(s.isalnum()) \n print(s.isalpha()) \n print(s.isdigit()) 'code' ",
          "test_type": "single_choice",
          "options": [
            "False \n False \n False",
            "True \n True \n True",
            "True \n False \n False",
            "True \n True \n False",
            "False \n True \n False"
          ],
          "correct": [2]
        },
        {
          "block-id": 47,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' print('Cyberpunk 2077'.isalnum()) 'code' ",
          "test_type": "single_choice",
          "options": ["False", "True", "–ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –æ—à–∏–±–∫a"],
          "correct": [0]
        },
        {
          "block-id": 48,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' print('2025-06-06'.islower()) \n print('2025-06-06'.isupper()) 'code' ",
          "test_type": "single_choice",
          "options": [
            "False \n False",
            "True \n True",
            "True \n False",
            "False \n True",
            "–ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –æ—à–∏–±–∫a"
          ],
          "correct": [0]
        }
      ]
    },
    {
      "title": "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫",
      "content": [
        {
          "block-id": 49,
          "type": "theory",
          "image": "course_photos/python_hard/32.jpg"
        },
        {
          "block-id": 50,
          "type": "theory",
          "image": "course_photos/python_hard/33.jpg"
        },
        {
          "block-id": 51,
          "type": "theory",
          "image": "course_photos/python_hard/34.jpg"
        },
        {
          "block-id": 52,
          "type": "theory",
          "image": "course_photos/python_hard/35.jpg"
        },
        {
          "block-id": 53,
          "type": "theory",
          "image": "course_photos/python_hard/36.jpg"
        },
        {
          "block-id": 54,
          "type": "theory",
          "image": "course_photos/python_hard/37.jpg"
        },
        {
          "block-id": 55,
          "type": "theory",
          "image": "course_photos/python_hard/38.jpg"
        },
        {
          "block-id": 56,
          "type": "theory",
          "image": "course_photos/python_hard/39.jpg"
        }
      ]
    },
    {
      "title": "–°–ø–∏—Å–∫–∏ –∏ —Ä–∞–±–æ—Ç–∞ —Å –Ω–∏–º–∏",
      "content": [
        {
          "block-id": 57,
          "type": "theory",
          "image": "course_photos/python_hard/40.jpg"
        },
        {
          "block-id": 58,
          "type": "theory",
          "image": "course_photos/python_hard/41.jpg"
        },
        {
          "block-id": 59,
          "type": "theory",
          "image": "course_photos/python_hard/42.jpg"
        },
        {
          "block-id": 60,
          "type": "theory",
          "image": "course_photos/python_hard/43.jpg"
        },
        {
          "block-id": 61,
          "type": "theory",
          "image": "course_photos/python_hard/44.jpg"
        },
        {
          "block-id": 62,
          "type": "theory",
          "image": "course_photos/python_hard/45.jpg"
        },
        {
          "block-id": 63,
          "type": "theory",
          "image": "course_photos/python_hard/46.jpg"
        },
        {
          "block-id": 64,
          "type": "test",
          "question": "–ó–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–∞—Ö, –∑–∞–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –æ—Ç–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏, –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è",
          "test_type": "single_choice",
          "options": [
            "–∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞–º–∏",
            "—á–∏—Å–ª–∞–º–∏",
            "–∑–Ω–∞—á–µ–Ω–∏—è–º–∏",
            "—Å—Ç—Ä–æ–∫–∞–º–∏",
            "—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏"
          ],
          "correct": [4]
        },
        {
          "block-id": 65,
          "type": "test",
          "question": "–ò–∑ —Å–∫–æ–ª—å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ—Å—Ç–æ–∏—Ç —Å–ø–∏—Å–æ–∫ numbers? <br> 'code' numbers = [3, 5, 7, 9] 'code'",
          "test_type": "single_choice",
          "options": ["3", "4", "5", "9"],
          "correct": [1]
        },
        {
          "block-id": 66,
          "type": "test",
          "question": "–ö–∞–∫–æ–π –∏–Ω–¥–µ–∫—Å —É —á–∏—Å–ª–∞ 17 –≤ —Å–ø–∏—Å–∫–µ numbers? <br> 'code' numbers = [1, 100, 7, 20, 17, 37, 22] 'code'",
          "test_type": "single_choice",
          "options": ["3", "7", "5", "4"],
          "correct": [3]
        },
        {
          "block-id": 67,
          "type": "test",
          "question": "–î–æ–ø—É—Å—Ç–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ <br> 'code' numbers = [] 'code' <br> –ö–∞–∫—É—é –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ 0 –∏–Ω–¥–µ–∫—Å—É —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è 'Chromatica'?",
          "test_type": "single_choice",
          "options": ["names[0] = 'Chromatica'", "names.append('Chromatica')"],
          "correct": [1]
        }
      ]
    },
    {
      "title": "–ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏",
      "content": [
        {
          "block-id": 68,
          "type": "theory",
          "image": "course_photos/python_hard/47.jpg"
        },
        {
          "block-id": 69,
          "type": "theory",
          "image": "course_photos/python_hard/48.jpg"
        },
        {
          "block-id": 70,
          "type": "theory",
          "image": "course_photos/python_hard/49.jpg"
        },
        {
          "block-id": 71,
          "type": "theory",
          "image": "course_photos/python_hard/50.jpg"
        },
        {
          "block-id": 72,
          "type": "theory",
          "image": "course_photos/python_hard/51.jpg"
        },
        {
          "block-id": 73,
          "type": "theory",
          "image": "course_photos/python_hard/52.jpg"
        },
        {
          "block-id": 74,
          "type": "theory",
          "image": "course_photos/python_hard/53.jpg"
        },
        {
          "block-id": 75,
          "type": "theory",
          "image": "course_photos/python_hard/54.jpg"
        },
        {
          "block-id": 76,
          "type": "theory",
          "image": "course_photos/python_hard/55.jpg"
        },
        {
          "block-id": 77,
          "type": "theory",
          "image": "course_photos/python_hard/56.jpg"
        },
        {
          "block-id": 78,
          "type": "theory",
          "image": "course_photos/python_hard/57.jpg"
        }
      ]
    },
    {
      "title": "–ú–µ—Ç–æ–¥—ã split –∏ join",
      "content": [
        {
          "block-id": 79,
          "type": "theory",
          "image": "course_photos/python_hard/58.jpg"
        },
        {
          "block-id": 80,
          "type": "theory",
          "image": "course_photos/python_hard/59.jpg"
        },
        {
          "block-id": 81,
          "type": "theory",
          "image": "course_photos/python_hard/60.jpg"
        },
        {
          "block-id": 82,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' s = 'a     b c' \n print(s.split()) 'code' ",
          "test_type": "single_choice",
          "options": [
            "None",
            "a    b c",
            "a b c",
            "['a', 'b', 'c']",
            "–ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –æ—à–∏–±–∫a"
          ],
          "correct": [3]
        },
        {
          "block-id": 83,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' print('-'.join('DNA')) 'code' ",
          "test_type": "single_choice",
          "options": [
            "None",
            "-DNA",
            "- D - N - A -",
            "D-N-A",
            "–ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –æ—à–∏–±–∫a"
          ],
          "correct": [4]
        },
        {
          "block-id": 84,
          "type": "test",
          "question": "–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥? <br> 'code' symbols = ['I', 'D', 'O', 'L'] \n print(symbols.join('-')) 'code' ",
          "test_type": "single_choice",
          "options": [
            "None",
            "IDOL",
            "- I - D - O - L -",
            "I-D-O-L",
            "–ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –æ—à–∏–±–∫a"
          ],
          "correct": [4]
        }
      ]
    }
  ]
}
